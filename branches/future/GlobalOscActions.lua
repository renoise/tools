--[[--------------------------------------------------------------------------
-- GlobalOscActions.lua

 DO NOT EDIT THIS FILE IN THE RENOISE RESOURCE FOLDER! UPDATING RENOISE WILL
 TRASH YOUR MODIFICATIONS!
 
 TO EXTEND MIDI MAPPINGS, COPY THIS FILE TO THE RENOISE PREFERENCES FOLDER, 
 THEN DO YOUR CHANGES AND ADDITIONS THERE.

--------------------------------------------------------------------------]]--

--[[--------------------------------------------------------------------------

 Renoise default OSC message set. Beside of the ones you find listed here, 
 Renoise already processes some realtime critical messages internally. 
 Those will never be trigger here, and thus can also not be overloaded in 
 this script:
 
 -- TODO: list all
 /renoise/transport/XXX
 /renoise/trigger/XXX

 All other messages which are received by Renoises global OSC server (as 
 defined in the application preferences), are handled in this script. 
 
 Message arguments, are passes to the process function as a table (array) of:

 argument = {
   tag, -- (OSC type tag. See http://opensoundcontrol.org/spec-1_0)
   value -- (OSC value as lua type: nil, boolean, number or a string)
 }
 
 The pattern is a string !without! the "/renoise" prefix, but the prefix must 
 be specified when sending something to Renoise. Some valid message examples 
 are:
 
 /renoise/transport/play (handled internally)
 /renoise/track[1]/volume f=1.0 (handled here)
 /renoise/window/activate_gui_preset i=1 (handled here)
 ...
 
--------------------------------------------------------------------------]]--

------------------------------------------------------------------------------
-- Interface
------------------------------------------------------------------------------

function process_message(pattern, arguments)

  -- only trace all messages for now
  local arguments_string = ""
  
  for _,arg in ipairs(arguments) do
    arguments_string = arguments_string .. 
      ("'%s'=%s "):format(arg.tag, tostring(arg.value))
  end
  
  print(("OSC Message: '%s' %s"):format(pattern, arguments_string))
end


--[[--------------------------------------------------------------------------
--------------------------------------------------------------------------]]--

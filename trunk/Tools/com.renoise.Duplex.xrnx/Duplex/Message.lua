--==============================================================================

--[[

The Message class is a container for messages, closely related to the ControlMap
TODO move all control-map/parameter attributes into "Param" ?
--]]


class 'Message' 

--------------------------------------------------------------------------------

--- Initialize Message class
-- @param device (Device)

function Message:__init(device)
  TRACE('Message:__init')

  --- (@{Duplex.Globals.DEVICE_MESSAGE}) the message context
  self.context = nil

  --- (@{Duplex.Globals.INPUT_TYPE}) derived from control-map
  self.input_method = nil 

  --- (table) attributes in the control-map parameter
  self.param = table.create()

  --- (Device) reference to the originating device
  self.device = nil

  --- (bool), true when the message was generated by the virtual 
  -- control surface, or other MessageStream clients
  self.is_virtual = nil
  
  --- the value for the chosen parameter (table or number)
  self.value = nil

  --- MIDI only, the channel of the message (1-16)
  self.channel = nil 

  --- MIDI only, to distinguish between NOTE-ON and NOTE-OFF events
  self.is_note_off = false

  --- MIDI only, tell if we are dealing with a disguised OSC message
  self.is_osc_msg = false

  --- whether or not a "key/keyboard" is pressure sensitive
  self.velocity_enabled = true

  --- MIDI only, the original MIDI message (3 bytes)
  self.midi_msg = nil

  ---  unique ViewBuilder id for each parameter
  self.id = nil 

  ---  name of the parent group 
  self.group_name = nil 

  ---  (int) index within control-map group, starting from 1
  self.index = nil 

  --- (int) column, starting from 1
  self.column = nil 

  --- (int) row, starting from 1
  self.row = nil 

  --- (number) set by os.clock() 
  self.timestamp = nil 

  --- (string or nil) the parameter name, if any
  self.name = nil 
  
  --- (number) minimum value
  self.max = nil  

  --- (number) maximum value
  self.min = nil

  -- (bool) true once the button is held for a while
  self.held_event_fired = false

end


--------------------------------------------------------------------------------

--- Print message (for debugging purposes)

function Message:__tostring()
  return string.format("message: context:%s, group_name:%s, value:%s",
    tostring(self.context), tostring(self.group_name),self.value)
end

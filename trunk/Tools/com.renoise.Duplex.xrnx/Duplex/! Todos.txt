================================================================================
Duplex Changelog, Notes & TODOs
================================================================================

--------------------------------------------------------------------------------
In Progress
--------------------------------------------------------------------------------

* Bjorn: Make the virtual control surface detect press/release

* Bjorn: Mixer option: Show only certain track types 

* Bjorn: Re-animate Device options parsing

* Eduard: find and load controllers and apps dynamically


================================================================================
Planned / Todo
================================================================================

Before beta starts

* [danoise]: share track and other "offsets" for multiple running apps 
* [danoise]: implement the "Navigator" app 
* [danoise]: add pitchbend support
* [danoise]: add generic channel mapping -> [CC23|2]
* [danoise]: start with the APC controller support
* [danoise]: device-preference format, divide into "options" and "mappings"

* [taktik]: OSC Device / protocol support
* [taktik]: Finish Behringer BFC and BFR classes and control maps

--

* Test applications: write Ohm64-based apps to ensure proper operation 
  o TestUISpinner/TestUISlider/TestUIToggleButton/etc

* Navigator
  o Extract code from other apps

* Effect:
  o Support other than selected FX
  o Support other parameter subsets than "everything"

* Mixer: 
  o Support Solo
  o Support Pre and Post Vol/Pan (via a page switch or config)
  o Support "OFF" and "MUTE" modes (which depend on Renoise preference)
  
* Relative MIDI controller message support for encoders

* Ability to map any app option?

* Application configuration panel:
  o List the names of application groups, each with "choose" button that open
    a slightly smaller version of the virtual UI for choosing the relevant
    control and/or group
  o Other options listed as a popup (the active choice)

* Device control-panel: 
  o Small (optional) thumbnail for device
  o Release/initialize device
  o Select among available control-map layouts (obtain list by scanning folder)
  o Display controlmap info (author, name, description) 
  o Reload control-map
  o Set control-map as standard (persistent setting)
  o MidiDevice: specify input port - only for devices that 
    doesn't have a dedicated class (remember the chosen port)
  o OSCDevice: specify the prefix (could be /renoise or /duplex always?)
  o Advanced settings tab (i.e. control brightness, contrast) - expose these 
    settings via generic "options" table in the device class

* ControlMap: <Page> node, indicates that multiple pages with identical layout
  can be expected (useful for access to the full mapping/MIDI implementation 
  of e.g. the Nocturn controller). Question: could the <Page> node become 
  problematic, in case that the controller doesn't switch ALL of it's parameters
  when a new page is entered? (on the other hand, there's no reason we can't 
  repeat values across pages?)

* Scheduler class: for double-press detect, and stuff like blinking objects
  o Matrix: the scheduled pattern should blink

* UITrigger: trigger button (with short delay, needs the Scheduler)
  o Delay time (0 for cycle mode, 100 for quick fade)
  o Colors (list)
    o Use as "fading effect" when a short delay is specified
    o In cycle mode, switch on each hit 

* Matrix: create a dedicated class for sequence triggers (UITrigger),
  complete with "blinking" and "shaded loop region"
  o Active pattern index (press)
  o Scheduled pattern index (press another button than the selected one)
  o Looped range (press button, hold and then press another button)

* "Soft-validate" the control-map - warn when required elements are missing, 
  but ignore unknown ones

* Display:clear(): when a device is closed, call this function (should use 
  some hardware-specific feature if possible)

* Improve application performance by removing UIComponent listeners when
  application is stopped, and re-attach on startup. This will also help to
  simplify the code, as the numerous checks for "self.active" in event-handlers 
  is no longer needed

* Browser: option for keeping devices in separate streams (should run faster)

* Specify color-space per control-map group (not all buttons are born equal)
* Specify unit-size per control-map group (not all buttons are born equal)

* Optimize: only compute palettes when dealing with a colorspace


--------------------------------------------------------------------------------
Discuss
--------------------------------------------------------------------------------

* Meta-applications / apps talking to each other?
  Expose the device process (all running apps on the device)

* Mixer makes "MUTE" (not "OFF") impossible !!
  Check when a track is muted, the type of mute and set mode accordingly

* Do we have access method for normal renoise mappings through Duplex?
  How hard to make such an application? (Answer)

* How settings are saved / persistent storage

* Ability to perform automation recording (using global Renoise API switch)
  Record any parameter exposed by the API?

* Ability to "discard" incoming messages after they have been processed (or 
  there would be note-on and cc messages all over the place). 


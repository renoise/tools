--[[----------------------------------------------------------------------------
-- Renoise Socket API Reference
----------------------------------------------------------------------------]]--

This reference describes the built-in OSC (Open Sound Control) support for 
Lua scripts in Renoise. OSC can be used in combination with sockets to 
send/receive Osc tagged data over process boundaries or exchange data 
across computers in a network (Internet).

Please have a look at http://opensoundcontrol.org for more general info 
about OSC


-- Examples

-- for some small examples on how to use the OSC and the sockets API, have a
-- look at the code sippet in the "Snippets/Osc.lua" file please. 


--==============================================================================
-- Osc
--==============================================================================

--------------------------------------------------------------------------------
-- renoise.Osc
--------------------------------------------------------------------------------

-- depackatizing raw data to Osc messages or bundles

-- checks the binary data for a valid osc message or bundle. if the data does
-- not look like an Osc message, or the message contains errors, nil is returned 
-- as first argument and the second return value will contain this error and. 
-- if depackatizing was successfull, either an Osc.Bundle or Osc.Message object 
-- is returned
renoise.Osc.from_binary_data(binary_data) 
  -> [Osc.Bundle or Osc.Message object or nil, error or nil]


--------------------------------------------------------------------------------
-- renoise.Osc.Message
--------------------------------------------------------------------------------

-- create

-- create a new osc message with the given pattern and optional arguments.
-- when arguments are specified, they must be specified as a table of 
-- {tag="X", value=SomeValue}'s. 
-- "tag" is the standard OSC type tag (see http://opensoundcontrol.org/spec-1_0)
-- all tags, except the 32 bit RGBA color tag are supported
-- "value" is the arguments value expressed with a Lua type. This value must 
-- be roghly convertible to the specified tag. Which means you can for example 
-- not specify a "i" (integer) as type and pass a string as a value. Use a 
-- number value instead. Not all tags requre a value. the "value" field then
-- does not has to be specified
renoise.Osc.Message(pattern [, table of {tag, value} arguments])

-- properties

-- the message pattern (like "/renoise/transport/start")
message.pattern 
  -> [read-only, string]

-- table of {tag="X", value=SomeValue}'s that represent the message arguments
-- see renoise.Osc.Message->create for more info
message.arguments 
  -> [read-only, table of {tag, value} tables]
  
-- raw binary representation of the messsage, like its needed when sending the 
-- message over the network
message.binary_data 
  -> [read-only, raw string]


--------------------------------------------------------------------------------
-- renoise.Socket.Bundle
--------------------------------------------------------------------------------

-- create

-- create a new bundle by specifying a timetag and one or more messages
-- if you don't know what to do with the timetag, simply use os.clock(), 
-- which means "now". messages are renoise.Osc.Message objects
renoise.Osc.Message(pattern, single_message_or_table_of_messages)

-- time value of the bundle
bundle.timetag
  -> [read-only, number]
  
-- access to the bundles elements (messages or again tables)
bundle.elements
  -> [read-only, table of renoise.Osc.Message or renoise.Osc.Bundle objects]
  
-- raw binary representation of the bundle, like its needed when sending the 
-- message over the network
bundle.binary_data 
  -> [read-only, raw string]

--[[----------------------------------------------------------------------------
----------------------------------------------------------------------------]]--